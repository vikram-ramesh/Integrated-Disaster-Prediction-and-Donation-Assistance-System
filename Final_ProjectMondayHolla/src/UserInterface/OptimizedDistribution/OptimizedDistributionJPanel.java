/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.OptimizedDistribution;

/**
 *
 * @author mansi
 */
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.ManagmentOrganization;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.Role.DriverRole;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import DynamicDijsktars.Dijkstra;
import DynamicDijsktars.Graph;
import DynamicDijsktars.Vertex;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class OptimizedDistributionJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OptimizedDistributionJPanel
     */
    private Dijkstra dijkstra;
    private JPanel UserProcessContainer;
    private Enterprise enterprise;

    private UserAccount useraccount;
    private ManagmentOrganization managementOrganization;

    HashMap< Integer, LinkedList<Vertex>> driverPathMap = new HashMap<Integer, LinkedList<Vertex>>();

    public OptimizedDistributionJPanel(JPanel UserProcessContainer, Enterprise enterprise, UserAccount useraccount, Organization organization) throws Exception {
        initComponents();

        this.dijkstra = new Dijkstra();

        System.out.println("Dijkstra  object " + dijkstra);
        int size = 5;
        dijkstra.create(size);  //graph made
        System.out.println("Graph Object" + dijkstra.getG());
        dijkstra.calculate(dijkstra.getG().getVertex(0));  //g.getVertex(0)

        dijkstra.printPath(dijkstra.getG());
        populateTable(dijkstra.getG());

        this.UserProcessContainer = UserProcessContainer;
        this.enterprise = enterprise;
        this.useraccount = useraccount;

        this.managementOrganization = (ManagmentOrganization) organization;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        v0 = new javax.swing.JButton();
        v1 = new javax.swing.JButton();
        v4 = new javax.swing.JButton();
        v2 = new javax.swing.JButton();
        v3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        shortestPathTbl = new javax.swing.JTable();
        btnAssignDriver = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        v0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                v0ActionPerformed(evt);
            }
        });

        v1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                v1ActionPerformed(evt);
            }
        });

        v2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                v2ActionPerformed(evt);
            }
        });

        shortestPathTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Shortest path", "Shortest path", "Distance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(shortestPathTbl);
        if (shortestPathTbl.getColumnModel().getColumnCount() > 0) {
            shortestPathTbl.getColumnModel().getColumn(0).setMinWidth(0);
            shortestPathTbl.getColumnModel().getColumn(0).setPreferredWidth(0);
            shortestPathTbl.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        btnAssignDriver.setText("Assign Driver");
        btnAssignDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignDriverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(v1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(v0, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(v4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(104, 104, 104)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(v2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(v3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addComponent(btnAssignDriver)
                .addGap(152, 152, 152))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(v1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(v2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnAssignDriver)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(v0, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(v3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(v4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(369, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void v0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_v0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_v0ActionPerformed

    private void v1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_v1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_v1ActionPerformed

    private void v2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_v2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_v2ActionPerformed

    private void btnAssignDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignDriverActionPerformed
        int selectedRow = shortestPathTbl.getSelectedRow();
        System.out.println("Intial size of verticesList" + dijkstra.getG().getVertices().size());
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a path");
            return;
        }
        LinkedList<Vertex> selectedList = (LinkedList<Vertex>) shortestPathTbl.getValueAt(selectedRow, 0);

        for (Vertex v : selectedList) {
            String btn = v.toString();
            if (btn.equals("v0")) {
                ImageIcon ii = new ImageIcon("C:\\Users\\mansi\\Desktop\\static.png");
                v0.setIcon(ii);
            }
            if (btn.equals("v1")) {
                ImageIcon ii = new ImageIcon("C:\\Users\\mansi\\Desktop\\static.png");
                v1.setIcon(ii);
            }
            if (btn.equals("v2")) {
                ImageIcon ii = new ImageIcon("C:\\Users\\mansi\\Desktop\\static.png");
                v2.setIcon(ii);
            }
            if (btn.equals("v3")) {
                ImageIcon ii = new ImageIcon("C:\\Users\\mansi\\Desktop\\static.png");
                v3.setIcon(ii);
            }
            if (btn.equals("v4")) {
                ImageIcon ii = new ImageIcon("C:\\Users\\mansi\\Desktop\\static.png");
                v4.setIcon(ii);
            }
            if (!v.toString().equals("v0")) {
                dijkstra.getG().getVertices().remove(v);
                System.out.println("Removed vertices" + v);
            }

        }
        System.out.println("Reduced size of verticesList" + dijkstra.getG().getVertices().size());
        try {

            Graph newG = dijkstra.addGraph(dijkstra.getG());
            dijkstra.calculate(newG.getVertex(0));
            dijkstra.printPath(newG);
            populateTable(newG);

        } catch (Exception ex) {
            System.out.println("Not able to recalculate Dijkstras while assigning driver");

        }

        for (Map.Entry<Integer, LinkedList<Vertex>> entry : driverPathMap.entrySet()) {
            

            System.out.println("Driver id" + entry.getKey());

            System.out.println("Driver path" + entry.getValue());
        }
        
        System.out.println("outside for ");
        //Assigning a driver
        for (UserAccount ua : managementOrganization.getUserAccountDirectory().getUserAccountList()) {

            if (ua.getRole().toString().equals("DriverRole")) {
                DriverRole d = (DriverRole) ua.getRole();

                System.out.println("The driver id--->" + d.getDriverId());

                if (!(driverPathMap.containsKey(d.getDriverId()))) {
                    driverPathMap.put(d.getDriverId(), selectedList);
                    System.out.println("Assigned driver" + d.getDriverId());
                    d.setAssigned(true);
                    break;
                }
            }
        }

        DriverJframe dJ = new DriverJframe(driverPathMap);

        for (Map.Entry<Integer, LinkedList<Vertex>> entry : driverPathMap.entrySet()) {
           

            System.out.println("Driver id" + entry.getKey());

            System.out.println("Driver path" + entry.getValue());
        }
    }//GEN-LAST:event_btnAssignDriverActionPerformed

    private void populateTable(Graph graphTable) {
        DefaultTableModel model = (DefaultTableModel) shortestPathTbl.getModel();
        model.setRowCount(0);

        for (Vertex v : graphTable.getVertices()) {
            v.path.addLast(v);

            Object[] row = new Object[3];

            row[0] = v.path;

            Set<Vertex> no_Duplicates = new HashSet<>(v.path);

            //   row[1] = v.path.toString();
            row[1] = no_Duplicates;

            row[2] = v.minDistance;

            model.addRow(row);

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignDriver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable shortestPathTbl;
    private javax.swing.JButton v0;
    private javax.swing.JButton v1;
    private javax.swing.JButton v2;
    private javax.swing.JButton v3;
    private javax.swing.JButton v4;
    // End of variables declaration//GEN-END:variables
}
